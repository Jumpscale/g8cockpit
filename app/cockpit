#!/usr/local/bin/jspython

from gevent import monkey; monkey.patch_all()
from gevent.wsgi import WSGIServer
from gevent.event import Event
import gevent
import signal
import sys

from JumpScale import j
import click

# app module
import ays_api
import ays_bot
import telegrambot
import mail


class ServerRack(object):

    def __init__(self, servers):
        self.servers = servers
        self.logger = j.logger.get('j.app.cockpit')

    def start(self):
        started = []
        try:
            for server in self.servers[:]:
                server.start()
                started.append(server)
                name = getattr(server, 'name', None) or server.__class__.__name__ or 'Server'
                self.logger.info('%s started', name)
        except:
            self.stop(started)
            raise

    def stop(self, servers=None):
        if servers is None:
            servers = self.servers[:]
        for server in servers:
            try:
                name = getattr(server, 'name', None) or server.__class__.__name__ or 'Server'
                self.logger.info('%s stopping', name)
                server.stop()
                self.logger.info('%s stopped', name)
            except:
                if getattr(server, 'loop', None):  # gevent >= 1.0
                    server.loop.handle_error(server.stop, *sys.exc_info())
                else:  # gevent <= 0.13
                    import traceback
                    traceback.print_exc()


def signal_shutdown():
    raise KeyboardInterrupt


def load_config(path):
    cfg = j.data.serializer.toml.load(path)
    return cfg


def get_components(config):
    """
    Return a list of configured subserver activated in the config
    """

    sub_servers = []
    if 'mail' in config and config['mail'].get('active', True):
        host = config['mail'].get('host', '127.0.0.1')
        port = config['mail'].get('port', 25)
        sub_servers.append(mail.Server((host, port)))

    if 'api' in config:
        if 'ays' in config['api'] and config['api'].get('active', True):
            host = config['api']['ays'].get('host', '127.0.0.1')
            port = config['api']['ays'].get('port', 5000)
            ays_api.app.config.update(config['api']['ays'])
            sub_servers.append(WSGIServer((host, port), ays_api.app))

    if 'bot' in config and config['bot'].get('active', True):
        if 'token' not in config['bot'] or config['bot']['token'] == '':
            print("You need to specify a token is you activate the bot component")
            print("""Please connect to telegram and talk to @botfather.
execute the command /newbot and choose a name and username for your bot
@botfather should give you a token, paste it here please.""")
            sys.exit(1)
        token = config['bot']['token']
        sub_servers.append(telegrambot.TGBot(token))

    sub_servers.append(ays_bot.AYSBot())

    return sub_servers

@click.command()
@click.option('--config', '-c', help="path to configuration file", default='config.toml')
def main(config):
    # read config and create sub server
    sub_servers = get_components(load_config(config))

    # start all sub servers
    rack = ServerRack(sub_servers)
    rack.start()

    # register signal
    forever = Event()
    gevent.signal(signal.SIGTERM, signal_shutdown)

    # wait forever
    try:
        forever.wait()
    except KeyboardInterrupt:
        rack.stop()

if __name__ == '__main__':
    # from IPython import embed;embed()
    main()
