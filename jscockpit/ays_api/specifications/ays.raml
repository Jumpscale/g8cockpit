#%RAML 1.0
title: Cockpit API
baseUri: http://js8:5000
version: v1
mediaType:  application/json
securedBy: [oauth_2_0: { scopes : [ "user:memberOf:globalID"] } ]
securitySchemes:
    - oauth_2_0:
        type: OAuth 2.0
        description:
            This API uses JWT to authenticate the requests.
            All members of an organization on itsyou.online have access to this API.
        describedBy:
          headers:
            Authorization:
              description: |
                Used to send a valid OAuth 2 access token.
          responses:
            401:
              description: Unauthorized


types:
  Repository:
    properties:
      path:
          type: string
          required: false
      name:
          type: string
          required: true
    example:
        path: "/opt/code/github/jumscpale/cockpit"
        name: "cockpit"

  Blueprint:
    properties:
      name:
          type: string
          required: true
      content:
          type: string
          required: true
    example:
        name: "cockpit.yaml"
        content: |
            service__main:
                description: "a service"

  Service:
    properties:
        name: string
        instance: string
        role: string
        actions.py: string
        state: string
        instance.hrd: string
    example:
        name: "github_repo"
        instance: "main"
        role: "github_repo"
        actions.py: |
                class Actions(ActionsBaseMgmt):
                    @action()
                    def foor(self):
                        print('do something')
        state: |
            {
            "events": {},
            "instanceHRDHash": "805bc5e03a12dd59b1d181b15a4490b2",
            "parent": "",
            "producers": {},
            "recipe": "sshkey",
            "recurring": {},
            "state": {
              "init": "OK",
              "install": "OK",
              "start": "OK"
            }
        instance.hrd: |
            {
                "github.client": "main"
                "github.url": "https://github.com/zaibon"
            }

  Template:
    properties:
        name:
            type: string
            required: true
        actions_py:
            type: string
            required: true
        schema_hrd:
            type: string
            required: true
    example:
        name: "github_repo"
        actions.py: |
                class Actions(ActionsBaseMgmt):
                    @action()
                    def foor(self):
                        print('do something')
        schema.hrd: |
            repo.name = type:'str' descr:'name of repo' @ASK
            repo.url = type:'str' descr:'url of github repo' default:''
            repo.account = parent:'github_account' @ASK
            repo.type =  type:'str' descr:'proj,code,ays,doc,user' @ASK
            code.path = type:'str' default:""
            github.client = type:'str' consume:'github_client:1' auto
            github.config= type:'str' consume:'github_config:1' auto
            milestone.category = type:'str' list
            milestones = type:'str' list consume:'github_milestone'
  Error:
    properties:
        code: integer
        error: string
    example:
        code: 404
        error: "repository not found"

/ays:
    /repository:
        description: a repository
        get:
            displayName: listRepositories
            description: list all repositorys
            responses:
                200:
                    body:
                        application/json:
                          type: Repository[]
        post:
            displayName: createNewRepository
            description: create a new repository
            body:
                application/json:
                    type: Repository
            responses:
                201:
                    description:
                        repository created
                    body:
                        application/json:
                          type: Repository
                409:
                    description: Repository with this name already exists.
                    body:
                        application/json:
                          type: Error
        /{repository}:
            uriParameters:
                repository:
                  type: string
            get:
                displayName: getRepository
                description: Get information of a repository
                responses:
                    200:
                        description: Detail of  a repository
                        body:
                            application/json:
                              type: Repository
                    404:
                        description: Repository not found
                        body:
                            application/json:
                              type: Error
            delete:
                displayName: deleteRepository
                description: Delete a repository
                responses:
                    204:
                        description: Repository removed
                    404:
                        description: Repository not found
                        body:
                            application/json:
                              type: Error

            /blueprint:
                description: A blueprint inside a repository
                get:
                    displayName: listBlueprints
                    description: List all blueprint
                    responses:
                        200:
                            body:
                                application/json:
                                  type: Blueprint
                        404:
                            description: Blueprint not found
                            body:
                                application/json:
                                    type: Error

                post:
                    displayName: createNewBlueprint
                    description: Create a new blueprint
                    body:
                        application/json:
                            properties:
                                type: Blueprint
                    responses:
                        201:
                            body:
                                application/json:
                                  type: Blueprint
                        409:
                            description: Blueprint with this name already exists
                            body:
                                application/json:
                                  type: Error
                /{blueprint}:
                    uriParameters:
                        blueprint:
                          type: string
                    get:
                        displayName: getBlueprint
                        description: Get a blueprint
                        responses:
                            200:
                                body:
                                    application/json:
                                      type: Blueprint
                            404:
                                description: Blueprint not found
                                body:
                                    application/json:
                                      type: Error
                    post:
                        displayName: executeBlueprint
                        description: Execute the blueprint
                        responses:
                            200:
                                description: blueprint executed
                            404:
                                description: blueprint not found
                                body:
                                    application/json:
                                      type: Error
                    put:
                        displayName: updateBlueprint
                        description: Update existing blueprint
                        body:
                            application/json:
                                properties:
                                    type: Blueprint
                        responses:
                            204:
                                description: blueprint updated
                            404:
                                description: blueprint not found
                                body:
                                    application/json:
                                      type: Error

                    delete:
                        displayName: deleteBlueprint
                        description: delete blueprint
                        responses:
                            204:
                                description: blueprint removed
                            404:
                                description: blueprint not found
                                body:
                                    application/json:
                                      type: Error

            /service:
                description: A service
                get:
                    displayName: listServices
                    description: List all services in the repository
                    responses:
                        200:
                            body:
                                application/json:
                                  type: Service[]
                /{role}:
                    uriParameters:
                        role:
                          type: string
                    get:
                        displayName: listServicesByRole
                        description: List all services of role 'role' in the repository
                        responses:
                            200:
                                body:
                                    application/json:
                                      type: Service[]
                    /action:
                        /{action}:
                            uriParameters:
                                action:
                                  type: string
                            post:
                                displayName: executeServiceActionByRole
                                description: Perform an action on all service with the role 'role'
                                queryParameters:
                                    args:
                                        description: argument to pass to the action
                                        type: string[]
                                responses:
                                    200:
                                        description: action started
                                    404:
                                        description: not action with this name found for this service
                                        body:
                                            application/json:
                                              type: Error
                    /{instance}:
                        uriParameters:
                            instance:
                              type: string
                        get:
                            displayName: getServiceByInstance
                            description: Get a service instance
                            responses:
                                200:
                                    body:
                                        application/json:
                                          type: Service
                                404:
                                    description: Service instance not found
                                    body:
                                        application/json:
                                          type: Error
                        delete:
                            displayName: deleteServiceByInstance
                            description: uninstall and delete a service
                            queryParameters:
                                scope:
                                    description: "List of roles on which we allow the execution of the action to propagate to"
                                    required: false
                                    type: string
                                    example: role
                            responses:
                                204:
                                    description: service deleted
                                404:
                                    description: Service instance not found
                                    body:
                                        application/json:
                                          type: Error
                        /action:
                            get:
                                displayName: listServiceActions
                                description: Get list of action available on this service
                                responses:
                                    200:
                                        body:
                                            application/json:
                                              type: string[]
                                    404:
                                        description: Service instance not found
                                        body:
                                            application/json:
                                              type: Error
                        /{action}:
                            uriParameters:
                                action:
                                  type: string
                            post:
                                displayName: executeServiceActionByInstance
                                description: Perform an action on a services
                                queryParameters:
                                    args:
                                        description: argument to pass to the action
                                        type: string[]
                                responses:
                                    200:
                                        description: action started
                                    404:
                                        description: Service instance not found
                                        body:
                                            application/json:
                                              type: Error

            /template:
                description: A template of a service
                get:
                    displayName: listTemplates
                    description: list all templates
                    responses:
                        200:
                            body:
                                application/json:
                                  type: Template[]
                post:
                    displayName: createNewTemplate
                    description: Create new template
                    body:
                        application/json:
                            type: Template
                    responses:
                        201:
                            body:
                                application/json:
                                  type: Template
                /{template}:
                    uriParameters:
                        template:
                          type: string
                    get:
                        displayName: getTemplate
                        description: Get a template
                        responses:
                            200:
                                body:
                                    application/json:
                                      type: Template
                            404:
                                body:
                                    application/json:
                                      type: Error
/webhooks:
    description:
    /github:
        post:
            description: Endpoint that receives the events from github
            responses:
                200:
                    description: event saved
                    body:
                        application/json:
/oauth:
    /callback:
        get:
            description: oauth endpoint where oauth provider need to send authorization code
            responses:
                200:
                    description: code received
